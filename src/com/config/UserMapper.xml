<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
	<resultMap type="com.zhao.entity.User" id="BaseResultMap">
		<id property="uid" column="uid" jdbcType="INTEGER"/>
		<result property="userName" column="userName" jdbcType="VARCHAR"/>
		<result property="password" column="password" jdbcType="VARCHAR"/>
		<result property="name" column="name" jdbcType="VARCHAR"/>
		<result property="sex" column="sex" jdbcType="INTEGER"/>
		<result property="address" column="address" jdbcType="VARCHAR"/>
		<result property="phone" column="phone" jdbcType="VARCHAR"/>
		<result property="email" column="email" jdbcType="VARCHAR"/>
		<result property="card" column="card" jdbcType="VARCHAR"/>
		<result property="mark" column="mark" jdbcType="INTEGER"/>
	</resultMap>
	
	<!-- 
		通过用户名查询一个用户，如果无参数传递，则不需要parameterType属性
		parameterMap表示需要在自定义一个parameterMap标签，当属性值为java.util.Map时表示传入多个参数
		resultMap表示返回多列数据，仅用于select语句
		resultType表示返回单列数据，仅用于select语句
	 -->
	 
	<select id="loadUserByName" parameterType="java.lang.String" resultMap="BaseResultMap">
		select * from user where userName=#{userName}
	</select>
	
	<select id="loadSelfAndAllmark10" resultMap="BaseResultMap">
		select * from user order by mark desc limit 1,10
	</select>
	
	<select id="loadById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select * from user where uid = #{uid}
	</select>
	
	
	<!-- 分页查询模块********************************************** -->
	<select id="selectCount" parameterType="java.lang.Long" resultType="BaseResultMap">
		select count(*) from user
	</select>
	<select id="selectPageData" parameterType="java.util.Map" resultMap="BaseResultMap">
		select * from user order by limit #{beginIndex},#{pagesize}
	</select>
	<!-- 分页查询********************************************** -->
	
	
	
	
	<insert id="insertUser" parameterType="com.zhao.entity.User">
		insert into user(userName,password,name,sex,address,phone,email,Card,mark) 
		  values(#{userName},#{password},#{name},#{sex},#{address},#{phone},#{email},#{card},#{mark})
	</insert>
		
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where uid=#{uid}
	</delete>
	
	<update id="updateUser">
	<!-- 		
	update user set userName = #{userName},name = #{name},sex= #{sex},address=#{address},phone=#{phone},email=#{email} where uid = #{uid}
	 -->
	</update>
	
	
	
	
	
	
	
	
</mapper>